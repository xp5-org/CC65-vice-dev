;
; File generated by cc65 v 2.18 - Ubuntu 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_clrscr
	.import		_cputs
	.import		_rand
	.import		_strcpy
	.import		_strlen
	.import		_sprintf
	.export		_seen_chars
	.export		_seen_count
	.export		_draw_seen_chars
	.export		_colors
	.export		_grid
	.export		_grid_colors
	.export		_shift_grid_up
	.export		_draw_grid
	.export		_draw_status_line
	.export		_draw_fixed_text
	.export		_init_acia
	.export		_main

.segment	"DATA"

_seen_count:
	.byte	$00
_colors:
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$03
	.byte	$00
	.byte	$05

.segment	"RODATA"

L0233:
	.byte	$D3,$57,$49,$46,$54,$4C,$49,$4E,$4B,$20,$D2,$D8,$20,$C7,$52,$49
	.byte	$44,$20,$C4,$45,$4D,$4F,$0D,$0A,$00
L025C:
	.byte	$C3,$48,$41,$52,$3A,$20,$24,$25,$30,$32,$D8,$20,$28,$25,$43,$29
	.byte	$20,$20,$20,$20,$00
L011B:
	.byte	$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$C1,$C2,$C3,$C4,$C5,$C6
	.byte	$00
L0123	:=	L011B+0
L02B2:
	.byte	$C5,$4D,$50,$54,$59,$00
L02B8:
	.byte	$D2,$45,$41,$44,$59,$00
L02BB:
	.byte	$C2,$55,$53,$59,$20,$00
L02AF:
	.byte	$C6,$55,$4C,$4C,$20,$00
L02CA:
	.byte	$D4,$D8,$3A,$20,$00
L02C0:
	.byte	$D2,$D8,$3A,$20,$00

.segment	"BSS"

_seen_chars:
	.res	20,$00
_grid:
	.res	100,$00
_grid_colors:
	.res	100,$00

; ---------------------------------------------------------------
; void __near__ draw_seen_chars (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_seen_chars: near

.segment	"CODE"

	jsr     decsp7
	lda     #$00
	ldy     #$06
L02D3:	sta     (sp),y
	lda     (sp),y
	cmp     _seen_count
	jcs     L02D5
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	ldy     #$04
	jsr     staxysp
	lda     #$24
	ldy     #$00
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	tay
	lda     _seen_chars,y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(L011B)
	sta     ptr1+1
	ldy     #<(L011B)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	tay
	lda     _seen_chars,y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(L0123)
	sta     ptr1+1
	ldy     #<(L0123)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
	ldx     #$04
	clc
	iny
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax3
	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax3
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02D3
L02D5:	lda     (sp),y
	cmp     #$14
	bcc     L02D6
	jmp     incsp7
L02D6:	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	ldy     #$04
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	sta     ptr1
	lda     #$04
	adc     ptr1+1
	sta     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax3
	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax3
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L02D5

.endproc

; ---------------------------------------------------------------
; void __near__ shift_grid_up (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shift_grid_up: near

.segment	"CODE"

	jsr     decsp2
	lda     #$00
	ldy     #$01
L02DA:	sta     (sp),y
	cmp     #$09
	jcs     L02DC
	lda     #$00
	dey
L02D9:	sta     (sp),y
	cmp     #$0A
	jcs     L0184
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02D7
	inx
L02D7:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     incax1
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02D8
	inx
L02D8:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     incax1
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02D9
L0184:	iny
	clc
	tya
	adc     (sp),y
	jmp     L02DA
L02DC:	lda     #$00
	dey
L02DB:	sta     (sp),y
	cmp     #$0A
	bcs     L019F
	lda     (sp),y
	tay
	lda     #$20
	sta     _grid+90,y
	ldy     #$00
	lda     (sp),y
	tay
	lda     #$01
	sta     _grid_colors+90,y
	ldy     #$00
	clc
	adc     (sp),y
	jmp     L02DB
L019F:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ draw_grid (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_grid: near

.segment	"CODE"

	jsr     decsp2
	lda     #$07
	jsr     pusha
	lda     #$0F
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$05
L02E0:	sta     (sp),y
	cmp     #$0A
	bcc     L02E2
	jmp     incsp6
L02E2:	lda     #$00
	dey
L02DF:	sta     (sp),y
	cmp     #$0A
	jcs     L01B7
	ldx     #$00
	iny
	lda     (sp),y
	clc
	ldy     #$03
	adc     (sp),y
	bcc     L02DD
	inx
L02DD:	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	ldy     #$04
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	bcc     L02E1
	inx
	clc
L02E1:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	lda     #$00
	clc
	tay
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02DF
L01B7:	iny
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02E0

.endproc

; ---------------------------------------------------------------
; void __near__ draw_status_line (unsigned char, __near__ const unsigned char *, __near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_status_line: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	jsr     pushax
	lda     #$0D
	jsr     pusha
	lda     #$00
	ldy     #$03
L02ED:	sta     (sp),y
	cmp     #$28
	bcs     L02F0
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02E3
	inx
L02E3:	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02E4
	inx
L02E4:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02ED
L02F0:	lda     #$00
L02EE:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosicmp
	jcs     L01EA
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02E5
	inx
L02E5:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02E6
	inx
L02E6:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02E7
	inx
L02E7:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02E8
	inx
L02E8:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02EE
L01EA:	lda     #$00
	ldy     #$03
L02EF:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$08
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosicmp
	jcs     L01FC
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02E9
	inx
L02E9:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02EA
	inx
L02EA:	jsr     pushax
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02EB
	inx
L02EB:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02EC
	inx
L02EC:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02EF
L01FC:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ draw_fixed_text (unsigned char, unsigned char, __near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_fixed_text: near

.segment	"CODE"

	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02F1
	inx
L02F1:	jsr     pushax
	jsr     decsp1
	lda     #$00
	tay
L02F4:	sta     (sp),y
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (sp),y
	tay
	lda     (ptr1),y
	beq     L0212
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02F2
	inx
L02F2:	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L02F3
	inx
L02F3:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02F4
L0212:	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ init_acia (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_acia: near

.segment	"CODE"

	lda     #$0B
	sta     $DE02
	lda     #$0C
	sta     $DE03
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     decsp3
	lda     #$00
	jsr     pusha
	ldy     #$2C
	jsr     subysp
	jsr     _clrscr
	lda     #<(L0233)
	ldx     #>(L0233)
	jsr     _cputs
	jsr     _init_acia
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     steax0sp
L0236:	jsr     ldeax0sp
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$64
	jsr     toslteax
	beq     L0237
	lda     #<(_grid)
	ldy     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_grid)
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$20
	dey
	sta     (ptr1),y
	lda     #<(_grid_colors)
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_grid_colors)
	iny
	adc     (sp),y
	sta     ptr1+1
	tya
	dey
	sta     (ptr1),y
	ldx     #$00
	jsr     laddeq0sp
	jmp     L0236
L0237:	jsr     _draw_grid
L02F8:	lda     $DE01
	and     #$08
	beq     L02FA
	lda     #$01
L02FA:	ldy     #$2F
	sta     (sp),y
	lda     (sp),y
	beq     L02F8
	lda     $DE00
	ldy     #$2D
	sta     (sp),y
	lda     #$18
	jsr     leaa0sp
	jsr     pushax
	lda     #<(L025C)
	ldx     #>(L025C)
	jsr     pushax
	ldy     #$31
	lda     (sp),y
	jsr     pusha0
	ldy     #$33
	lda     (sp),y
	jsr     pusha0
	ldy     #$08
	jsr     _sprintf
	lda     #$16
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #$1A
	jsr     leaa0sp
	jsr     pushax
	lda     #$01
	jsr     _draw_fixed_text
	ldy     #$2D
	lda     (sp),y
	cmp     #$A3
	beq     L02F8
	cmp     #$5C
	beq     L02F8
	lda     #$00
	jsr     pusha
	jsr     decsp1
	tay
L02F6:	sta     (sp),y
	cmp     _seen_count
	bcs     L026A
	lda     (sp),y
	tay
	lda     _seen_chars,y
	ldy     #$2F
	cmp     (sp),y
	bne     L026B
	lda     #$01
	tay
	sta     (sp),y
	jmp     L02FD
L026B:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02F6
L026A:	iny
L02FD:	lda     (sp),y
	bne     L0277
	lda     _seen_count
	cmp     #$14
	bcs     L02FE
	inc     _seen_count
	clc
	adc     #<(_seen_chars)
	sta     ptr1
	lda     #$00
	adc     #>(_seen_chars)
	sta     ptr1+1
	ldy     #$2F
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	jmp     L027E
L02FE:	tya
	dey
L02F7:	sta     (sp),y
	cmp     #$14
	bcs     L0280
	ldx     #$00
	lda     (sp),y
	jsr     decax1
	clc
	adc     #<(_seen_chars)
	tay
	txa
	adc     #>(_seen_chars)
	tax
	tya
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	tay
	lda     _seen_chars,y
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02F7
L0280:	ldy     #$2F
	lda     (sp),y
	sta     _seen_chars+19
L027E:	jsr     _draw_seen_chars
L0277:	jsr     incsp2
	ldy     #$2C
	lda     (sp),y
	tax
	iny
	lda     (sp),y
	sta     _grid+90,x
	lda     #<(_grid_colors+90)
	ldx     #>(_grid_colors+90)
	dey
	clc
	adc     (sp),y
	bcc     L0298
	inx
L0298:	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     tosmoda0
	sta     ptr1
	txa
	clc
	adc     #>(_colors)
	sta     ptr1+1
	ldy     #<(_colors)
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$2C
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     steax0sp
L029C:	jsr     ldeax0sp
	jsr     pusheax
	ldx     #$01
	lda     #$00
	sta     sreg
	sta     sreg+1
	lda     #$90
	jsr     toslteax
	beq     L029D
	ldx     #$00
	lda     #$01
	jsr     laddeq0sp
	jmp     L029C
L029D:	ldy     #$2C
	lda     (sp),y
	cmp     #$0A
	bcc     L02A4
	lda     #$00
	sta     (sp),y
	jsr     _shift_grid_up
L02A4:	jsr     _draw_grid
	lda     #$01
	ldy     #$2E
	sta     (sp),y
	lda     #$0E
	jsr     leaa0sp
	jsr     pushax
	ldy     #$31
	lda     (sp),y
	beq     L02B0
	lda     #<(L02AF)
	ldx     #>(L02AF)
	jmp     L02B3
L02B0:	lda     #<(L02B2)
	ldx     #>(L02B2)
L02B3:	jsr     _strcpy
	lda     #$04
	jsr     leaa0sp
	jsr     pushax
	ldy     #$30
	lda     (sp),y
	beq     L02B9
	lda     #<(L02B8)
	ldx     #>(L02B8)
	jmp     L02BC
L02B9:	lda     #<(L02BB)
	ldx     #>(L02BB)
L02BC:	jsr     _strcpy
	lda     #$17
	jsr     pusha
	lda     #<(L02C0)
	ldx     #>(L02C0)
	jsr     pushax
	lda     #$11
	jsr     leaa0sp
	jsr     pushax
	ldy     #$34
	lda     (sp),y
	beq     L02C4
	lda     #$02
	jmp     L02FF
L02C4:	lda     #$05
L02FF:	jsr     _draw_status_line
	lda     #$18
	jsr     pusha
	lda     #<(L02CA)
	ldx     #>(L02CA)
	jsr     pushax
	lda     #$07
	jsr     leaa0sp
	jsr     pushax
	ldy     #$33
	lda     (sp),y
	beq     L02CE
	lda     #$05
	jmp     L0300
L02CE:	lda     #$02
L0300:	jsr     _draw_status_line
	jmp     L02F8

.endproc

