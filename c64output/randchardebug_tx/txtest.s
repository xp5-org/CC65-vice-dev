;
; File generated by cc65 v 2.18 - Ubuntu 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_clrscr
	.import		_gotoxy
	.import		_cputs
	.import		_cprintf
	.import		_rand
	.import		_strcat
	.import		_strcpy
	.import		_strlen
	.import		_memset
	.export		_colors
	.export		_grid
	.export		_grid_colors
	.export		_get_color_for_char
	.export		_compose_status
	.export		_wait_tx_ready
	.export		_init_acia
	.export		_draw_grid
	.export		_draw_status_line
	.export		_main

.segment	"DATA"

_colors:
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$03
	.byte	$00
	.byte	$05

.segment	"RODATA"

L01AB:
	.byte	$D3,$57,$49,$46,$54,$4C,$49,$4E,$4B,$20,$D4,$D8,$20,$C4,$45,$4D
	.byte	$4F,$0D,$0A,$00
L01BF:
	.byte	$D3,$45,$4E,$44,$49,$4E,$47,$3A,$20,$25,$43,$20,$20,$20,$00
L011E:
	.byte	$C6,$55,$4C,$4C,$20,$20,$00
L0121:
	.byte	$C5,$4D,$50,$54,$59,$20,$00
L012E:
	.byte	$C2,$55,$53,$59,$20,$00
L01D9:
	.byte	$D2,$45,$41,$44,$59,$00
L012B	:=	L01D9+0
L01D0:
	.byte	$C6,$55,$4C,$4C,$20,$00
L01D3:
	.byte	$C5,$4D,$50,$54,$59,$00
L01DC	:=	L012E+0
L0126:
	.byte	$D4,$D8,$3A,$20,$00
L01E1:
	.byte	$D2,$D8,$3A,$20,$00
L01EB	:=	L0126+0
L0119	:=	L01E1+0

.segment	"BSS"

_grid:
	.res	100,$00
_grid_colors:
	.res	100,$00

; ---------------------------------------------------------------
; unsigned char __near__ get_color_for_char (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_color_for_char: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$06
	jsr     tosumoda0
	sta     ptr1
	txa
	clc
	adc     #>(_colors)
	sta     ptr1+1
	ldy     #<(_colors)
	ldx     #$00
	lda     (ptr1),y
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ compose_status (__near__ unsigned char *, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_compose_status: near

.segment	"CODE"

	jsr     pusha
	ldy     #$05
	jsr     pushwysp
	lda     #<(L0119)
	ldx     #>(L0119)
	jsr     _strcpy
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	beq     L011F
	lda     #<(L011E)
	ldx     #>(L011E)
	jmp     L0122
L011F:	lda     #<(L0121)
	ldx     #>(L0121)
L0122:	jsr     _strcat
	ldy     #$05
	jsr     pushwysp
	lda     #<(L0126)
	ldx     #>(L0126)
	jsr     _strcat
	ldy     #$05
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	beq     L012C
	lda     #<(L012B)
	ldx     #>(L012B)
	jmp     L012F
L012C:	lda     #<(L012E)
	ldx     #>(L012E)
L012F:	jsr     _strcat
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ wait_tx_ready (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait_tx_ready: near

.segment	"CODE"

	ldx     #$FF
	txa
	jsr     pushax
L022B:	lda     $DE01
	and     #$02
	bne     L022A
	jsr     ldax0sp
	sta     regsave
	stx     regsave+1
	jsr     decax1
	jsr     stax0sp
	lda     regsave
	ora     regsave+1
	bne     L022B
	jmp     incsp2
L022A:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ init_acia (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_acia: near

.segment	"CODE"

	lda     #$0B
	sta     $DE02
	lda     #$0C
	sta     $DE03
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_grid (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_grid: near

.segment	"CODE"

	jsr     decsp2
	lda     #$07
	jsr     pusha
	lda     #$0F
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$05
L0230:	sta     (sp),y
	cmp     #$0A
	bcc     L0232
	jmp     incsp6
L0232:	lda     #$00
	dey
L022F:	sta     (sp),y
	cmp     #$0A
	jcs     L014C
	ldx     #$00
	iny
	lda     (sp),y
	clc
	ldy     #$03
	adc     (sp),y
	bcc     L022D
	inx
L022D:	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	ldy     #$04
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	bcc     L0231
	inx
	clc
L0231:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	lda     #$00
	clc
	tay
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	jmp     L022F
L014C:	iny
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0230

.endproc

; ---------------------------------------------------------------
; void __near__ draw_status_line (unsigned char, __near__ const unsigned char *, __near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_status_line: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	jsr     pushax
	lda     #$0D
	jsr     pusha
	lda     #$00
	ldy     #$03
L023D:	sta     (sp),y
	cmp     #$28
	bcs     L0240
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0233
	inx
L0233:	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0234
	inx
L0234:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L023D
L0240:	lda     #$00
L023E:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosicmp
	jcs     L017F
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0235
	inx
L0235:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0236
	inx
L0236:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0237
	inx
L0237:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0238
	inx
L0238:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L023E
L017F:	lda     #$00
	ldy     #$03
L023F:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$08
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosicmp
	jcs     L0191
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0239
	inx
L0239:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L023A
	inx
L023A:	jsr     pushax
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L023B
	inx
L023B:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L023C
	inx
L023C:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L023F
L0191:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldy     #$1A
	jsr     subysp
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _clrscr
	lda     #<(L01AB)
	ldx     #>(L01AB)
	jsr     _cputs
	jsr     _init_acia
	lda     #<(_grid)
	ldx     #>(_grid)
	jsr     pushax
	lda     #$20
	jsr     pusha0
	lda     #$64
	jsr     _memset
L01B3:	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$1A
	jsr     tosmoda0
	ldy     #$C1
	jsr     incaxy
	jsr     pusha
	ldy     #$00
	lda     (sp),y
	jsr     _get_color_for_char
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$16
	jsr     _gotoxy
	lda     #<(L01BF)
	ldx     #>(L01BF)
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$04
	jsr     _cprintf
	lda     #$00
	ldy     #$1C
	sta     (sp),y
	lda     $DE01
	and     #$08
	beq     L0245
	lda     #$01
L0245:	iny
	sta     (sp),y
	lda     #$12
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1F
	lda     (sp),y
	beq     L01D1
	lda     #<(L01D0)
	ldx     #>(L01D0)
	jmp     L01D4
L01D1:	lda     #<(L01D3)
	ldx     #>(L01D3)
L01D4:	jsr     _strcpy
	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1E
	lda     (sp),y
	beq     L01DA
	lda     #<(L01D9)
	ldx     #>(L01D9)
	jmp     L01DD
L01DA:	lda     #<(L01DC)
	ldx     #>(L01DC)
L01DD:	jsr     _strcpy
	lda     #$17
	jsr     pusha
	lda     #<(L01E1)
	ldx     #>(L01E1)
	jsr     pushax
	lda     #$15
	jsr     leaa0sp
	jsr     pushax
	ldy     #$22
	lda     (sp),y
	beq     L01E5
	lda     #$02
	jmp     L0246
L01E5:	lda     #$05
L0246:	jsr     _draw_status_line
	lda     #$18
	jsr     pusha
	lda     #<(L01EB)
	ldx     #>(L01EB)
	jsr     pushax
	lda     #$0B
	jsr     leaa0sp
	jsr     pushax
	ldy     #$21
	lda     (sp),y
	beq     L01EF
	lda     #$05
	jmp     L0247
L01EF:	lda     #$02
L0247:	jsr     _draw_status_line
	ldy     #$01
	lda     (sp),y
	sta     $DE00
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	ldy     #$04
	jsr     steaxysp
L01F7:	ldy     #$07
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$0B
	lda     #$00
	sta     sreg
	sta     sreg+1
	lda     #$B8
	jsr     toslteax
	beq     L01F8
	ldx     #$00
	lda     #$01
	ldy     #$04
	jsr     laddeqysp
	jmp     L01F7
L01F8:	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0241
	inx
L0241:	sta     ptr1
	stx     ptr1+1
	dey
	lda     (sp),y
	dey
	sta     (ptr1),y
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0242
	inx
L0242:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$07
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$0F
	jsr     incaxy
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0243
	inx
L0243:	jsr     pushax
	lda     #$00
	clc
	tay
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$05
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$04
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	jsr     incsp4
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	cmp     #$0A
	bcc     L021A
	lda     #$00
	sta     (sp),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	cmp     #$0A
	bcc     L021A
	lda     #$00
	sta     (sp),y
	lda     #<(_grid)
	ldx     #>(_grid)
	jsr     pushax
	lda     #$20
	jsr     pusha0
	lda     #$64
	jsr     _memset
	lda     #<(_grid_colors)
	ldx     #>(_grid_colors)
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     #$64
	jsr     _memset
	jsr     _draw_grid
L021A:	jsr     incsp2
	jmp     L01B3

.endproc

