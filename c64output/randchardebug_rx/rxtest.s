;
; File generated by cc65 v 2.18 - Ubuntu 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_clrscr
	.import		_cputs
	.import		_strcpy
	.import		_strlen
	.import		_sprintf
	.export		_seen_chars
	.export		_seen_count
	.export		_colors
	.export		_grid
	.export		_grid_colors
	.export		_get_color_for_char
	.export		_draw_seen_chars
	.export		_shift_grid_up
	.export		_draw_grid
	.export		_draw_status_line
	.export		_draw_fixed_text
	.export		_init_acia
	.export		_main

.segment	"DATA"

_seen_count:
	.byte	$00
_flash_color_index:
	.byte	$00
_flash_colors:
	.byte	$02
	.byte	$06
_colors:
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$03
	.byte	$00
	.byte	$05

.segment	"RODATA"

L0264:
	.byte	$C3,$48,$41,$52,$3A,$20,$24,$25,$30,$32,$D8,$20,$28,$25,$43,$29
	.byte	$20,$20,$20,$20,$00
L023B:
	.byte	$D3,$57,$49,$46,$54,$4C,$49,$4E,$4B,$20,$D2,$D8,$20,$C4,$45,$4D
	.byte	$4F,$0D,$0A,$00
L012D:
	.byte	$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$C1,$C2,$C3,$C4,$C5,$C6
	.byte	$00
L0135	:=	L012D+0
L02DE:
	.byte	$C6,$C6,$55,$4C,$4C,$20,$00
L02E7:
	.byte	$D2,$45,$41,$44,$59,$00
L02EA:
	.byte	$C2,$55,$53,$59,$20,$00
L02E1:
	.byte	$C5,$4D,$50,$54,$59,$00
L02F9:
	.byte	$D4,$D8,$3A,$20,$00
L02EF:
	.byte	$D2,$D8,$3A,$20,$00

.segment	"BSS"

_seen_chars:
	.res	20,$00
_grid:
	.res	100,$00
_grid_colors:
	.res	100,$00

; ---------------------------------------------------------------
; unsigned char __near__ get_color_for_char (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_color_for_char: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$06
	jsr     tosumoda0
	sta     ptr1
	txa
	clc
	adc     #>(_colors)
	sta     ptr1+1
	ldy     #<(_colors)
	ldx     #$00
	lda     (ptr1),y
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ draw_seen_chars (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_seen_chars: near

.segment	"CODE"

	jsr     decsp7
	lda     #$00
	ldy     #$06
L0302:	sta     (sp),y
	lda     (sp),y
	cmp     _seen_count
	jcs     L0304
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	ldy     #$04
	jsr     staxysp
	lda     #$24
	ldy     #$00
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	tay
	lda     _seen_chars,y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(L012D)
	sta     ptr1+1
	ldy     #<(L012D)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	tay
	lda     _seen_chars,y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(L0135)
	sta     ptr1+1
	ldy     #<(L0135)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
	ldx     #$04
	clc
	iny
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax3
	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax3
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0302
L0304:	lda     (sp),y
	cmp     #$14
	bcc     L0305
	jmp     incsp7
L0305:	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	ldy     #$04
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	sta     ptr1
	lda     #$04
	adc     ptr1+1
	sta     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldx     #$04
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax3
	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	ldy     #$04
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax3
	sta     ptr1
	stx     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L0304

.endproc

; ---------------------------------------------------------------
; void __near__ shift_grid_up (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shift_grid_up: near

.segment	"CODE"

	jsr     decsp2
	lda     #$00
	ldy     #$01
L0309:	sta     (sp),y
	cmp     #$09
	jcs     L030B
	lda     #$00
	dey
L0308:	sta     (sp),y
	cmp     #$0A
	jcs     L018B
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0306
	inx
L0306:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     incax1
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0307
	inx
L0307:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     incax1
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0308
L018B:	iny
	clc
	tya
	adc     (sp),y
	jmp     L0309
L030B:	lda     #$00
	dey
L030A:	sta     (sp),y
	cmp     #$0A
	bcs     L01A6
	lda     (sp),y
	tay
	lda     #$20
	sta     _grid+90,y
	ldy     #$00
	lda     (sp),y
	tay
	lda     #$01
	sta     _grid_colors+90,y
	ldy     #$00
	clc
	adc     (sp),y
	jmp     L030A
L01A6:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ draw_grid (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_grid: near

.segment	"CODE"

	jsr     decsp2
	lda     #$07
	jsr     pusha
	lda     #$0F
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$05
L030F:	sta     (sp),y
	cmp     #$0A
	bcc     L0311
	jmp     incsp6
L0311:	lda     #$00
	dey
L030E:	sta     (sp),y
	cmp     #$0A
	jcs     L01BE
	ldx     #$00
	iny
	lda     (sp),y
	clc
	ldy     #$03
	adc     (sp),y
	bcc     L030C
	inx
L030C:	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	ldy     #$04
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	bcc     L0310
	inx
	clc
L0310:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	lda     #$00
	clc
	tay
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	jmp     L030E
L01BE:	iny
	clc
	lda     #$01
	adc     (sp),y
	jmp     L030F

.endproc

; ---------------------------------------------------------------
; void __near__ draw_status_line (unsigned char, __near__ const unsigned char *, __near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_status_line: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	jsr     pushax
	lda     #$0D
	jsr     pusha
	lda     #$00
	ldy     #$03
L031C:	sta     (sp),y
	cmp     #$28
	bcs     L031F
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0312
	inx
L0312:	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0313
	inx
L0313:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L031C
L031F:	lda     #$00
L031D:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosicmp
	jcs     L01F1
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0314
	inx
L0314:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0315
	inx
L0315:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0316
	inx
L0316:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0317
	inx
L0317:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L031D
L01F1:	lda     #$00
	ldy     #$03
L031E:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$08
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosicmp
	jcs     L0203
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0318
	inx
L0318:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0319
	inx
L0319:	jsr     pushax
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L031A
	inx
L031A:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L031B
	inx
L031B:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L031E
L0203:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ draw_fixed_text (unsigned char, unsigned char, __near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_fixed_text: near

.segment	"CODE"

	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0320
	inx
L0320:	jsr     pushax
	jsr     decsp1
	lda     #$00
	tay
L0323:	sta     (sp),y
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (sp),y
	tay
	lda     (ptr1),y
	beq     L0219
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0321
	inx
L0321:	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0322
	inx
L0322:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	lda     (sp),y
	clc
	adc     #$01
	jmp     L0323
L0219:	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ init_acia (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_acia: near

.segment	"CODE"

	lda     #$0B
	sta     $DE02
	lda     #$0C
	sta     $DE03
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"DATA"

L02C5:
	.byte	$00
L02C8:
	.byte	$02
	.byte	$06

.segment	"CODE"

	jsr     decsp3
	lda     #$00
	jsr     pusha
	jsr     pusha
	ldy     #$2C
	jsr     subysp
	jsr     _clrscr
	lda     #<(L023B)
	ldx     #>(L023B)
	jsr     _cputs
	jsr     _init_acia
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     steax0sp
L023E:	jsr     ldeax0sp
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$64
	jsr     toslteax
	beq     L023F
	lda     #<(_grid)
	ldy     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_grid)
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$20
	dey
	sta     (ptr1),y
	lda     #<(_grid_colors)
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_grid_colors)
	iny
	adc     (sp),y
	sta     ptr1+1
	tya
	dey
	sta     (ptr1),y
	ldx     #$00
	jsr     laddeq0sp
	jmp     L023E
L023F:	jsr     _draw_grid
L0329:	lda     $DE01
	and     #$08
	beq     L032B
	lda     #$01
L032B:	ldy     #$30
	sta     (sp),y
	lda     (sp),y
	beq     L0329
	lda     $DE00
	ldy     #$2E
	sta     (sp),y
	lda     #$18
	jsr     leaa0sp
	jsr     pushax
	lda     #<(L0264)
	ldx     #>(L0264)
	jsr     pushax
	ldy     #$32
	lda     (sp),y
	jsr     pusha0
	ldy     #$34
	lda     (sp),y
	jsr     pusha0
	ldy     #$08
	jsr     _sprintf
	lda     #$16
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #$1A
	jsr     leaa0sp
	jsr     pushax
	lda     #$01
	jsr     _draw_fixed_text
	ldy     #$2E
	lda     (sp),y
	cmp     #$1C
	beq     L0329
	lda     #$00
	jsr     pusha
	jsr     decsp1
	tay
L0327:	sta     (sp),y
	cmp     _seen_count
	bcs     L0271
	lda     (sp),y
	tay
	lda     _seen_chars,y
	ldy     #$30
	cmp     (sp),y
	bne     L0272
	lda     #$01
	tay
	sta     (sp),y
	jmp     L032C
L0272:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0327
L0271:	iny
L032C:	lda     (sp),y
	bne     L027E
	lda     _seen_count
	cmp     #$14
	bcs     L032D
	inc     _seen_count
	clc
	adc     #<(_seen_chars)
	sta     ptr1
	lda     #$00
	adc     #>(_seen_chars)
	sta     ptr1+1
	ldy     #$30
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	jmp     L0285
L032D:	tya
	dey
L0328:	sta     (sp),y
	cmp     #$14
	bcs     L0287
	ldx     #$00
	lda     (sp),y
	jsr     decax1
	clc
	adc     #<(_seen_chars)
	tay
	txa
	adc     #>(_seen_chars)
	tax
	tya
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	tay
	lda     _seen_chars,y
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0328
L0287:	ldy     #$30
	lda     (sp),y
	sta     _seen_chars+19
L0285:	jsr     _draw_seen_chars
L027E:	jsr     incsp2
	ldy     #$2D
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0325
	inx
L0325:	sta     ptr1
	stx     ptr1+1
	ldy     #$2E
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$2D
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0326
	inx
L0326:	jsr     pushax
	ldy     #$30
	lda     (sp),y
	jsr     _get_color_for_char
	ldy     #$00
	jsr     staspidx
	ldy     #$2C
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	cmp     #$0A
	bcc     L02AB
	lda     #$00
	sta     (sp),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	cmp     #$0A
	bcc     L02AB
	lda     #$00
	sta     (sp),y
	tax
	sta     sreg
	sta     sreg+1
	jsr     steax0sp
L02AA:	jsr     ldeax0sp
	jsr     pusheax
	ldx     #$00
	stx     sreg
	stx     sreg+1
	lda     #$64
	jsr     toslteax
	beq     L02AB
	lda     #<(_grid)
	ldy     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_grid)
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$20
	dey
	sta     (ptr1),y
	lda     #<(_grid_colors)
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_grid_colors)
	iny
	adc     (sp),y
	sta     ptr1+1
	tya
	dey
	sta     (ptr1),y
	ldx     #$00
	jsr     laddeq0sp
	jmp     L02AA
L02AB:	jsr     _draw_grid
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	jsr     steax0sp
L02BB:	jsr     ldeax0sp
	jsr     pusheax
	ldx     #$01
	lda     #$00
	sta     sreg
	sta     sreg+1
	lda     #$90
	jsr     toslteax
	beq     L02BC
	lda     #$2A
	jsr     pusha
	jsr     push0
	ldy     L02C5
	lda     L02C8,y
	jsr     pusha
	lda     L02C5
	clc
	adc     #$01
	and     #$01
	sta     L02C5
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
	jsr     incsp4
	lda     #$01
	jsr     laddeq0sp
	jmp     L02BB
L02BC:	lda     #$01
	ldy     #$2F
	sta     (sp),y
	lda     #$0E
	jsr     leaa0sp
	jsr     pushax
	ldy     #$32
	lda     (sp),y
	beq     L02DF
	lda     #<(L02DE)
	ldx     #>(L02DE)
	jmp     L02E2
L02DF:	lda     #<(L02E1)
	ldx     #>(L02E1)
L02E2:	jsr     _strcpy
	lda     #$04
	jsr     leaa0sp
	jsr     pushax
	ldy     #$31
	lda     (sp),y
	beq     L02E8
	lda     #<(L02E7)
	ldx     #>(L02E7)
	jmp     L02EB
L02E8:	lda     #<(L02EA)
	ldx     #>(L02EA)
L02EB:	jsr     _strcpy
	lda     #$17
	jsr     pusha
	lda     #<(L02EF)
	ldx     #>(L02EF)
	jsr     pushax
	lda     #$11
	jsr     leaa0sp
	jsr     pushax
	ldy     #$35
	lda     (sp),y
	beq     L02F3
	lda     #$02
	jmp     L032E
L02F3:	lda     #$05
L032E:	jsr     _draw_status_line
	lda     #$18
	jsr     pusha
	lda     #<(L02F9)
	ldx     #>(L02F9)
	jsr     pushax
	lda     #$07
	jsr     leaa0sp
	jsr     pushax
	ldy     #$34
	lda     (sp),y
	beq     L02FD
	lda     #$05
	jmp     L032F
L02FD:	lda     #$02
L032F:	jsr     _draw_status_line
	jmp     L0329

.endproc

