;
; File generated by cc65 v 2.18 - Ubuntu 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_clrscr
	.import		_cputs
	.import		_sprintf
	.import		_strlen
	.export		_init_acia
	.export		_send_string
	.export		_draw_green_count
	.export		_main

.segment	"RODATA"

L0157:
	.byte	$D3,$57,$49,$46,$54,$CC,$49,$4E,$4B,$20,$D4,$D8,$3A,$20,$D3,$45
	.byte	$4E,$44,$49,$4E,$47,$20,$54,$45,$53,$54,$20,$50,$41,$54,$54,$45
	.byte	$52,$4E,$2E,$2E,$2E,$0D,$0A,$00
L0167:
	.byte	$D3,$54,$41,$52,$54,$20,$50,$41,$54,$54,$45,$52,$4E,$20,$53,$45
	.byte	$4E,$54,$2E,$2E,$2E,$0D,$0A,$00
L0171:
	.byte	$54,$45,$53,$54,$20,$50,$48,$52,$41,$53,$45,$20,$53,$45,$4E,$54
	.byte	$2E,$2E,$2E,$0D,$0A,$00
L0128:
	.byte	$D4,$D8,$20,$C3,$4F,$55,$4E,$54,$3A,$20,$25,$55,$20,$43,$48,$41
	.byte	$52,$53,$00
L016A:
	.byte	$D4,$C5,$D3,$D4,$20,$D0,$C8,$D2,$C1,$D3,$C5,$00
L0177:
	.byte	$45,$4E,$44,$2E,$2E,$2E,$0D,$0A,$00
L017C:
	.byte	$C4,$4F,$4E,$45,$2E,$0D,$0A,$00
L0174:
	.byte	$24,$24,$24,$00
L0164:
	.byte	$23,$00
L0161	:=	L0164+0
L015B:
	.byte	$41,$00
L015E	:=	L0164+0

; ---------------------------------------------------------------
; void __near__ init_acia (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_acia: near

.segment	"CODE"

	lda     #$0B
	sta     $DE02
	lda     #$0C
	sta     $DE03
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ send_string (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_send_string: near

.segment	"CODE"

	jsr     pushax
	jmp     L0114
L0112:	jsr     ldax0sp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     $DE00
	jsr     decsp2
	ldx     #$00
	txa
	jsr     stax0sp
L011A:	jsr     ldax0sp
	cmp     #$58
	txa
	sbc     #$1B
	bvc     L0121
	eor     #$80
L0121:	bpl     L011B
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	jmp     L011A
L011B:	jsr     incsp2
L0114:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L0112
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ draw_green_count (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_green_count: near

.segment	"CODE"

	jsr     pushax
	ldy     #$28
	jsr     subysp
	ldx     #$03
	lda     #$70
	jsr     pushax
	jsr     decsp1
	txa
	jsr     leaa0sp
	jsr     pushax
	lda     #<(L0128)
	ldx     #>(L0128)
	jsr     pushax
	ldy     #$32
	jsr     pushwysp
	ldy     #$06
	jsr     _sprintf
	lda     #$00
	tay
L0187:	sta     (sp),y
	cmp     #$28
	bcs     L0189
	lda     #$03
	jsr     leaa0sp
	clc
	adc     (sp),y
	bcc     L0136
	inx
L0136:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	beq     L0189
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0183
	inx
L0183:	jsr     pushax
	lda     #$05
	jsr     leaa0sp
	ldy     #$02
	clc
	adc     (sp),y
	bcc     L013D
	inx
L013D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0184
	inx
L0184:	sta     ptr1
	stx     ptr1+1
	lda     #$1C
	sta     (ptr1),y
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0187
L0189:	lda     (sp),y
	cmp     #$28
	bcs     L0144
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0185
	inx
L0185:	sta     ptr1
	stx     ptr1+1
	lda     #$20
	sta     (ptr1),y
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0186
	inx
L0186:	sta     ptr1
	stx     ptr1+1
	lda     #$1C
	sta     (ptr1),y
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L0189
L0144:	ldy     #$2D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     push0
	jsr     _clrscr
	lda     #<(L0157)
	ldx     #>(L0157)
	jsr     _cputs
	jsr     _init_acia
	lda     #<(L015B)
	ldx     #>(L015B)
	jsr     _send_string
	lda     #<(L015E)
	ldx     #>(L015E)
	jsr     _send_string
	lda     #<(L0161)
	ldx     #>(L0161)
	jsr     _send_string
	lda     #<(L0164)
	ldx     #>(L0164)
	jsr     _send_string
	lda     #<(L0167)
	ldx     #>(L0167)
	jsr     _cputs
	lda     #<(L016A)
	ldx     #>(L016A)
	jsr     _send_string
	ldx     #$00
	lda     #$0B
	jsr     addeq0sp
	lda     #<(L0171)
	ldx     #>(L0171)
	jsr     _cputs
	lda     #<(L0174)
	ldx     #>(L0174)
	jsr     _send_string
	lda     #<(L0177)
	ldx     #>(L0177)
	jsr     _cputs
	jsr     ldax0sp
	jsr     _draw_green_count
	lda     #<(L017C)
	ldx     #>(L017C)
	jsr     _cputs
L018A:	jmp     L018A

.endproc

