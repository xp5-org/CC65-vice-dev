;
; File generated by cc65 v 2.18 - Ubuntu 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_clrscr
	.import		_cputs
	.import		_snprintf
	.export		_print_status
	.export		_init_acia
	.export		_main

.segment	"RODATA"

L0149:
	.byte	$D7,$41,$49,$54,$49,$4E,$47,$20,$46,$4F,$52,$20,$23,$23,$23,$20
	.byte	$54,$4F,$20,$53,$54,$41,$52,$54,$20,$52,$45,$43,$4F,$52,$44,$49
	.byte	$4E,$47,$2E,$2E,$2E,$00
L01C3:
	.byte	$C2,$55,$46,$46,$45,$52,$20,$4F,$56,$45,$52,$46,$4C,$4F,$57,$21
	.byte	$20,$D2,$45,$53,$45,$54,$54,$49,$4E,$47,$2E,$00
L0175:
	.byte	$D2,$45,$43,$4F,$52,$44,$49,$4E,$47,$20,$53,$54,$41,$52,$54,$45
	.byte	$44,$2E,$2E,$2E,$00
L0145:
	.byte	$D3,$57,$49,$46,$54,$4C,$49,$4E,$4B,$20,$D2,$D8,$20,$C4,$45,$4D
	.byte	$4F,$0D,$0A,$00
L01A8:
	.byte	$C3,$4F,$55,$4E,$54,$3A,$20,$25,$55,$20,$43,$48,$41,$52,$53,$00
L0196:
	.byte	$D2,$45,$43,$45,$49,$56,$45,$44,$3A,$00
L0179	:=	L0149+37
L01C7	:=	L0149+37
L014D	:=	L0149+37

.segment	"BSS"

_recv_buffer:
	.res	256,$00
_count_str:
	.res	40,$00

; ---------------------------------------------------------------
; void __near__ print_status (__near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_status: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	jsr     pushax
	jsr     decsp1
	lda     #$00
	tay
L01DD:	sta     (sp),y
	cmp     #$28
	bcs     L01DC
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (sp),y
	tay
	lda     (ptr1),y
	beq     L010D
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L01D5
	inx
L01D5:	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L01D6
	inx
L01D6:	sta     ptr1
	stx     ptr1+1
	lda     #$15
	sta     (ptr1),y
	lda     (sp),y
	clc
	adc     #$01
	jmp     L01DD
L010D:	tay
L01DC:	lda     (sp),y
	cmp     #$28
	bcs     L0123
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L01D7
	inx
L01D7:	sta     ptr1
	stx     ptr1+1
	lda     #$20
	sta     (ptr1),y
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L01D8
	inx
L01D8:	sta     ptr1
	stx     ptr1+1
	lda     #$15
	sta     (ptr1),y
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jmp     L01DC
L0123:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ init_acia (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_acia: near

.segment	"CODE"

	lda     #$0B
	sta     $DE02
	lda     #$0C
	sta     $DE03
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     decsp2
	jsr     push0
	jsr     push0
	jsr     pusha
	jsr     pusha
	jsr     pusha
	jsr     _clrscr
	lda     #<(L0145)
	ldx     #>(L0145)
	jsr     _cputs
	jsr     _init_acia
	lda     #<(L0149)
	ldx     #>(L0149)
	jsr     pushax
	lda     #$16
	jsr     _print_status
	lda     #<(L014D)
	ldx     #>(L014D)
L01E8:	jsr     pushax
	lda     #$17
	jsr     _print_status
L01DE:	lda     $DE01
	and     #$08
	beq     L01E0
	lda     #$01
L01E0:	ldy     #$08
	sta     (sp),y
	lda     (sp),y
	beq     L01DE
	lda     $DE00
	dey
	sta     (sp),y
	cmp     #$1C
	beq     L01DE
	ldy     #$00
	lda     (sp),y
	bne     L0165
	ldy     #$07
	lda     (sp),y
	cmp     #$23
	bne     L01E1
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	cmp     #$03
	bne     L01DE
	lda     #$01
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	txa
	ldy     #$05
	jsr     staxysp
	ldy     #$03
	jsr     staxysp
	ldy     #$01
	sta     (sp),y
	lda     #<(L0175)
	ldx     #>(L0175)
	jsr     pushax
	lda     #$16
	jsr     _print_status
	lda     #<(L0179)
	ldx     #>(L0179)
	jmp     L01E8
L01E1:	lda     #$00
	ldy     #$02
	sta     (sp),y
	jmp     L01DE
L0165:	ldy     #$06
	lda     (sp),y
	cmp     #$00
	bne     L0182
	dey
	lda     (sp),y
	cmp     #$FF
L0182:	bcs     L0180
	ldy     #$06
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$05
	jsr     staxysp
	lda     regsave
	clc
	adc     #<(_recv_buffer)
	sta     ptr1
	lda     regsave+1
	adc     #>(_recv_buffer)
	sta     ptr1+1
	ldy     #$07
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$04
	jsr     ldaxysp
	jsr     incax1
	ldy     #$03
	jsr     staxysp
L0180:	ldy     #$07
	lda     (sp),y
	cmp     #$24
	jne     L01E3
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	cmp     #$03
	jne     L01BD
	ldx     #$00
	ldy     #$05
	jsr     subeqysp
	ldy     #$06
	jsr     ldaxysp
	cmp     #$00
	txa
	sbc     #$01
	bcc     L018E
	ldx     #$00
	lda     #$FF
	ldy     #$05
	jsr     staxysp
L018E:	lda     #<(_recv_buffer)
	ldy     #$05
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_recv_buffer)
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     #<(L0196)
	ldx     #>(L0196)
	jsr     pushax
	lda     #$16
	jsr     _print_status
	jsr     decsp2
	ldx     #$00
	txa
L01E7:	jsr     stax0sp
	jsr     axulong
	cmp     #$50
	txa
	sbc     #$C3
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcs     L019A
	jsr     ldax0sp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	jmp     L01E7
L019A:	jsr     incsp2
	lda     #<(_recv_buffer)
	ldx     #>(_recv_buffer)
	jsr     pushax
	lda     #$16
	jsr     _print_status
	lda     #<(_count_str)
	ldx     #>(_count_str)
	jsr     pushax
	lda     #$28
	jsr     pusha0
	lda     #<(L01A8)
	ldx     #>(L01A8)
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	cmp     #$03
	txa
	sbc     #$00
	lda     #$00
	tax
	bcc     L01AE
	ldy     #$0A
	jsr     ldaxysp
	jsr     decax3
L01AE:	jsr     pushax
	ldy     #$08
	jsr     _snprintf
	lda     #<(_count_str)
	ldx     #>(_count_str)
	jsr     pushax
	lda     #$17
	jsr     _print_status
	lda     #$00
	tay
	sta     (sp),y
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	tax
	ldy     #$05
	jsr     staxysp
	ldy     #$03
	jsr     staxysp
	jmp     L01BD
L01E3:	lda     #$00
	ldy     #$01
	sta     (sp),y
L01BD:	ldy     #$06
	jsr     ldaxysp
	cmp     #$FF
	txa
	sbc     #$00
	jcc     L01DE
	lda     #<(L01C3)
	ldx     #>(L01C3)
	jsr     pushax
	lda     #$16
	jsr     _print_status
	lda     #<(L01C7)
	ldx     #>(L01C7)
	jsr     pushax
	lda     #$17
	jsr     _print_status
	lda     #$00
	tay
	sta     (sp),y
	tax
	ldy     #$05
	jsr     staxysp
	ldy     #$03
	jsr     staxysp
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	jmp     L01DE

.endproc

