;
; File generated by cc65 v 2.18 - Ubuntu 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_clrscr
	.import		_gotoxy
	.import		_cputs
	.import		_cprintf
	.import		_rand
	.import		_strcat
	.import		_strcpy
	.import		_strlen
	.export		_colors
	.export		_grid
	.export		_grid_colors
	.export		_compose_status
	.export		_wait_tx_ready
	.export		_init_acia
	.export		_fill_grid_random
	.export		_shift_grid_up
	.export		_draw_grid
	.export		_draw_status_line
	.export		_main

.segment	"DATA"

_colors:
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$03
	.byte	$00
	.byte	$05

.segment	"RODATA"

L01F2:
	.byte	$D3,$57,$49,$46,$54,$4C,$49,$4E,$4B,$20,$D4,$D8,$20,$C7,$52,$49
	.byte	$44,$20,$C4,$45,$4D,$4F,$0D,$0A,$00
L020B:
	.byte	$D3,$45,$4E,$44,$49,$4E,$47,$3A,$20,$25,$43,$20,$20,$20,$00
L011E:
	.byte	$C5,$4D,$50,$54,$59,$20,$00
L011B:
	.byte	$C6,$55,$4C,$4C,$20,$20,$00
L012B:
	.byte	$C2,$55,$53,$59,$20,$00
L0265	:=	L012B+0
L0262:
	.byte	$D2,$45,$41,$44,$59,$00
L021C:
	.byte	$C6,$55,$4C,$4C,$20,$00
L021F:
	.byte	$C5,$4D,$50,$54,$59,$00
L0225	:=	L0262+0
L0228	:=	L012B+0
L025C	:=	L021F+0
L0259	:=	L021C+0
L0128	:=	L0262+0
L022D:
	.byte	$D2,$D8,$3A,$20,$00
L0123:
	.byte	$D4,$D8,$3A,$20,$00
L0116	:=	L022D+0
L026A	:=	L022D+0
L0274	:=	L0123+0
L0237	:=	L0123+0

.segment	"BSS"

_grid:
	.res	100,$00
_grid_colors:
	.res	100,$00

; ---------------------------------------------------------------
; void __near__ compose_status (__near__ unsigned char *, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_compose_status: near

.segment	"CODE"

	jsr     pusha
	ldy     #$05
	jsr     pushwysp
	lda     #<(L0116)
	ldx     #>(L0116)
	jsr     _strcpy
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	lda     (sp),y
	beq     L011C
	lda     #<(L011B)
	ldx     #>(L011B)
	jmp     L011F
L011C:	lda     #<(L011E)
	ldx     #>(L011E)
L011F:	jsr     _strcat
	ldy     #$05
	jsr     pushwysp
	lda     #<(L0123)
	ldx     #>(L0123)
	jsr     _strcat
	ldy     #$05
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	beq     L0129
	lda     #<(L0128)
	ldx     #>(L0128)
	jmp     L012C
L0129:	lda     #<(L012B)
	ldx     #>(L012B)
L012C:	jsr     _strcat
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ wait_tx_ready (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait_tx_ready: near

.segment	"CODE"

	ldx     #$FF
	txa
	jsr     pushax
L0280:	lda     $DE01
	and     #$02
	bne     L027F
	jsr     ldax0sp
	sta     regsave
	stx     regsave+1
	jsr     decax1
	jsr     stax0sp
	lda     regsave
	ora     regsave+1
	bne     L0280
	jmp     incsp2
L027F:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ init_acia (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_acia: near

.segment	"CODE"

	lda     #$0B
	sta     $DE02
	lda     #$0C
	sta     $DE03
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fill_grid_random (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fill_grid_random: near

.segment	"CODE"

	jsr     decsp2
	lda     #$00
	ldy     #$01
L0285:	sta     (sp),y
	cmp     #$0A
	bcc     L0286
	jmp     incsp2
L0286:	lda     #$00
	dey
L0284:	sta     (sp),y
	cmp     #$0A
	jcs     L0145
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0282
	inx
L0282:	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$1A
	jsr     tosmoda0
	ldy     #$C1
	jsr     incaxy
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0283
	inx
L0283:	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     tosmoda0
	sta     ptr1
	txa
	clc
	adc     #>(_colors)
	sta     ptr1+1
	ldy     #<(_colors)
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0284
L0145:	iny
	clc
	tya
	adc     (sp),y
	jmp     L0285

.endproc

; ---------------------------------------------------------------
; void __near__ shift_grid_up (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shift_grid_up: near

.segment	"CODE"

	jsr     decsp2
	lda     #$00
	ldy     #$01
L028A:	sta     (sp),y
	cmp     #$09
	jcs     L028C
	lda     #$00
	dey
L0289:	sta     (sp),y
	cmp     #$0A
	jcs     L0160
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0287
	inx
L0287:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     incax1
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0288
	inx
L0288:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     incax1
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0289
L0160:	iny
	clc
	tya
	adc     (sp),y
	jmp     L028A
L028C:	lda     #$00
	dey
L028B:	sta     (sp),y
	cmp     #$0A
	bcs     L017B
	lda     #<(_grid+90)
	ldx     #>(_grid+90)
	clc
	adc     (sp),y
	bcc     L0185
	inx
L0185:	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$1A
	jsr     tosmoda0
	ldy     #$C1
	jsr     incaxy
	ldy     #$00
	jsr     staspidx
	lda     #<(_grid_colors+90)
	ldx     #>(_grid_colors+90)
	ldy     #$00
	clc
	adc     (sp),y
	bcc     L018B
	inx
L018B:	jsr     pushax
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     tosmoda0
	sta     ptr1
	txa
	clc
	adc     #>(_colors)
	sta     ptr1+1
	ldy     #<(_colors)
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L028B
L017B:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ draw_grid (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_grid: near

.segment	"CODE"

	jsr     decsp2
	lda     #$07
	jsr     pusha
	lda     #$0F
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$05
L0290:	sta     (sp),y
	cmp     #$0A
	bcc     L0292
	jmp     incsp6
L0292:	lda     #$00
	dey
L028F:	sta     (sp),y
	cmp     #$0A
	jcs     L0195
	ldx     #$00
	iny
	lda     (sp),y
	clc
	ldy     #$03
	adc     (sp),y
	bcc     L028D
	inx
L028D:	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	ldy     #$04
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	bcc     L0291
	inx
	clc
L0291:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid)
	sta     ptr1
	txa
	adc     #>(_grid)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	lda     #$00
	clc
	tay
	adc     (sp),y
	pha
	lda     #$D8
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #<(_grid_colors)
	sta     ptr1
	txa
	adc     #>(_grid_colors)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	jmp     L028F
L0195:	iny
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0290

.endproc

; ---------------------------------------------------------------
; void __near__ draw_status_line (unsigned char, __near__ const unsigned char *, __near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_status_line: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	jsr     pushax
	lda     #$0D
	jsr     pusha
	lda     #$00
	ldy     #$03
L029D:	sta     (sp),y
	cmp     #$28
	bcs     L02A0
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0293
	inx
L0293:	sta     ptr1
	stx     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	tya
	clc
	iny
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0294
	inx
L0294:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L029D
L02A0:	lda     #$00
L029E:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosicmp
	jcs     L01C8
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0295
	inx
L0295:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0296
	inx
L0296:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0297
	inx
L0297:	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0298
	inx
L0298:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L029E
L01C8:	lda     #$00
	ldy     #$03
L029F:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$08
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosicmp
	jcs     L01DA
	lda     #$00
	clc
	ldy     #$01
	adc     (sp),y
	sta     ptr1
	lda     #$04
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0299
	inx
L0299:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L029A
	inx
L029A:	jsr     pushax
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #$D8
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L029B
	inx
L029B:	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L029C
	inx
L029C:	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L029F
L01DA:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldy     #$1B
	jsr     subysp
	jsr     _clrscr
	lda     #<(L01F2)
	ldx     #>(L01F2)
	jsr     _cputs
	jsr     _init_acia
	jsr     _fill_grid_random
L02A2:	jsr     _draw_grid
	lda     #$00
	ldy     #$1A
L02A1:	sta     (sp),y
	cmp     #$0A
	jcs     L01FC
	lda     (sp),y
	tay
	lda     _grid,y
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$16
	jsr     _gotoxy
	lda     #<(L020B)
	ldx     #>(L020B)
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldy     #$04
	jsr     _cprintf
	lda     #$00
	ldy     #$19
	sta     (sp),y
	lda     $DE01
	and     #$08
	beq     L02A4
	lda     #$01
L02A4:	iny
	sta     (sp),y
	lda     #$0F
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1C
	lda     (sp),y
	beq     L021D
	lda     #<(L021C)
	ldx     #>(L021C)
	jmp     L0220
L021D:	lda     #<(L021F)
	ldx     #>(L021F)
L0220:	jsr     _strcpy
	lda     #$05
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1B
	lda     (sp),y
	beq     L0226
	lda     #<(L0225)
	ldx     #>(L0225)
	jmp     L0229
L0226:	lda     #<(L0228)
	ldx     #>(L0228)
L0229:	jsr     _strcpy
	lda     #$17
	jsr     pusha
	lda     #<(L022D)
	ldx     #>(L022D)
	jsr     pushax
	lda     #$12
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1F
	lda     (sp),y
	beq     L0231
	lda     #$02
	jmp     L02A5
L0231:	lda     #$05
L02A5:	jsr     _draw_status_line
	lda     #$18
	jsr     pusha
	lda     #<(L0237)
	ldx     #>(L0237)
	jsr     pushax
	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1E
	lda     (sp),y
	beq     L023B
	lda     #$05
	jmp     L02A6
L023B:	lda     #$02
L02A6:	jsr     _draw_status_line
	ldy     #$00
	lda     (sp),y
	sta     $DE00
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	iny
	jsr     steaxysp
L0243:	ldy     #$04
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$0B
	lda     #$00
	sta     sreg
	sta     sreg+1
	lda     #$B8
	jsr     toslteax
	beq     L0244
	ldx     #$00
	lda     #$01
	tay
	jsr     laddeqysp
	jmp     L0243
L0244:	lda     #$01
	ldy     #$19
	sta     (sp),y
	lda     $DE01
	and     #$08
	beq     L02A8
	lda     #$01
L02A8:	iny
	sta     (sp),y
	lda     #$0F
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1C
	lda     (sp),y
	beq     L025A
	lda     #<(L0259)
	ldx     #>(L0259)
	jmp     L025D
L025A:	lda     #<(L025C)
	ldx     #>(L025C)
L025D:	jsr     _strcpy
	lda     #$05
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1B
	lda     (sp),y
	beq     L0263
	lda     #<(L0262)
	ldx     #>(L0262)
	jmp     L0266
L0263:	lda     #<(L0265)
	ldx     #>(L0265)
L0266:	jsr     _strcpy
	lda     #$17
	jsr     pusha
	lda     #<(L026A)
	ldx     #>(L026A)
	jsr     pushax
	lda     #$12
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1F
	lda     (sp),y
	beq     L026E
	lda     #$02
	jmp     L02A9
L026E:	lda     #$05
L02A9:	jsr     _draw_status_line
	lda     #$18
	jsr     pusha
	lda     #<(L0274)
	ldx     #>(L0274)
	jsr     pushax
	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	ldy     #$1E
	lda     (sp),y
	beq     L0278
	lda     #$05
	jmp     L02AA
L0278:	lda     #$02
L02AA:	jsr     _draw_status_line
	jsr     incsp1
	ldy     #$1A
	clc
	lda     #$01
	adc     (sp),y
	jmp     L02A1
L01FC:	jsr     _shift_grid_up
	jmp     L02A2

.endproc

